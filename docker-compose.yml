version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - net
    env_file:
      - .env
    ports:
      - ${ZOOKEEPER_PORT}:${ZOOKEEPER_CLIENT_PORT}
    environment:
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_CLIENT_PORT}

  kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      - net
    depends_on:
      - zookeeper
    env_file:
      - .env
    ports:
      - ${KAFKA_PORT_FORWARD}:${KAFKA_PORT_FORWARD}
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  nginx:
    restart: always
    build: './nginx'
    networks:
      - net
    env_file:
      - .env
    ports:
      - ${NGINX_PORT}:${NGINX_PORT}
    depends_on:
      - cash-grab

  redis:
    image: redis:alpine
    restart: always
    networks:
      - net
    env_file:
      - .env
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    environment:
      - REDIS_ADDR=${REDIS_ADDR}
      - REDIS_PASSWORD=${REDIS_PASSWORD}

  database:
    image: postgres:alpine
    restart: always
    networks:
      - net
    ports:
      - ${DB_CONNECTION_PORT}:${DB_CONNECTION_PORT}
    env_file:
      - .env
    environment:
      - PGUSER=${DB_CONNECTION_USER}
      - PGSSLMODE=disable
      - POSTGRES_PASSWORD=${DB_CONNECTION_PASSWORD}
      - POSTGRES_USER=${DB_CONNECTION_USER}
      - POSTGRES_DB=${DB_CONNECTION_DBNAME}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 10s
      timeout: 5s
      retries: 5

  cash-grab:
    build:
      context: .
      dockerfile: ./Dockerfile
    networks:
      - net
    ports:
      - ${PORT}:${PORT}
    env_file:
      - .env
    environment:
      - PORT=${PORT}
      - DB_CONNECTION_HOST=${DB_CONNECTION_HOST}
      - DB_CONNECTION_USER=${DB_CONNECTION_USER}
      - DB_CONNECTION_PASSWORD=${DB_CONNECTION_PASSWORD}
      - DB_CONNECTION_DBNAME=${DB_CONNECTION_DBNAME}
      - DB_CONNECTION_PORT=${DB_CONNECTION_PORT}
      - JWS_KEY=${JWS_KEY}
      - AWS_SECRET_ID=${AWS_SECRET_ID}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_BUCKET=${AWS_BUCKET}
      - EMAIL_PRO=${EMAIL_PRO}
      - EMAIL_PRO_SMTP=${EMAIL_PRO_SMTP}
      - EMAIL_PRO_PASSWORD=${EMAIL_PRO_PASSWORD}
      - EMAIL_PRO_PORT=${EMAIL_PRO_PORT}
      - REDIS_ADDR=${REDIS_ADDR}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      database:
        condition: service_healthy

networks:
  net:
    driver: bridge
